apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 33
    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "com.nitrosoft.ua.advancedandroid.test.CustomTestRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix ".debug"
            debuggable true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    namespace 'com.nitrosoft.ua.advancedandroid'
}

//kapt {
//    arguments {
//        // When using Java 9 and above
//        arg("kotshi.generatedAnnotation", "javax.annotation.processing.Generated")
//    }
//}

dependencies {
    implementation project(':poweradapter')

    implementation "androidx.core:core:$androidxVersion"
    implementation "androidx.cardview:cardview:$cardViewVersion"
    implementation "androidx.recyclerview:recyclerview:$recylerViewVersion"
    implementation "com.google.android.material:material:$materialVersion"

    implementation "androidx.room:room-runtime:$archComponentVersion"
    kapt "androidx.room:room-compiler:$archComponentVersion"

    implementation "androidx.room:room-rxjava2:$archComponentVersion"

    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"

    implementation "se.ansman.kotshi:api:$kotshiVersion"
    kapt "se.ansman.kotshi:compiler:$kotshiVersion"

    implementation "com.jakewharton.threetenabp:threetenabp:$treeTenAppVersion"

    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    implementation "com.jakewharton.rxrelay2:rxrelay:$rxRelayVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:$rxBindingsVersion"

    implementation "com.jakewharton.timber:timber:$timberVersion"

    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"

    kaptAndroidTest "com.google.dagger:dagger-compiler:$daggerVersion"

    androidTestImplementation "androidx.test:core:$testCoreVersion"

    androidTestImplementation "androidx.test:runner:$testRunnerVersion"
    androidTestImplementation "androidx.test:rules:$testRulesVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
}

def mockCopySpec = copySpec {
    from rootProject.file('app/')
    include 'mock/'
}

task copyMock(type: Copy) {
    ['src/debug/assets', 'src/test/resources', 'src/androidTest/resources'].each { dest ->
        copy {
            with mockCopySpec
            into dest
        }
    }
}

build.finalizedBy(copyMock)
